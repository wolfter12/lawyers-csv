{"version":3,"sources":["actions/types.js","configs/constants.js","configs/header-accessors.js","utils/phone-formatter.js","utils/email-formatter.js","utils/has-children-formatter.js","utils/yearly-income-formatter.js","utils/license-states-formatter.js","configs/papaparse.config.js","parser/csv.js","utils/csv-required-fields-validator.js","utils/add-id.js","utils/add-duplication-field.js","components/UploadFile/UploadFile.js","components/UploadFile/index.js","actions/validationActions.js","actions/dataActions.js","configs/columns.js","utils/validator.js","components/Table/Table.js","components/Table/index.js","components/Warning/Warning.js","components/Warning/index.js","components/App/App.js","components/App/index.js","reportWebVitals.js","reducers/dataReducer.js","reducers/validationReducer.js","reducers/index.js","store.js","index.js"],"names":["PARSE_FILE","VALID_STRUCTURE","DELETE_DATA","DATE_FORMATS","PHONE_FORMATS","LICENSE_NUMBER_FORMATS","WARNING_MESSAGE","INVALID_CELL","PHONE","EMAIL","YEARLY_INCOME","HAS_CHILDREN","LICENSE_STATES","phoneFormatter","phoneNumber","some","reg","test","phone","emailFormatter","str","_","toLower","hasChildFormatter","value","length","yearlyIncomeFormatter","number","Number","isNaN","String","parseFloat","toFixed","licenseStatesFormatter","split","map","state","statesJSON","find","name","abbreviation","toLowerCase","undefined","join","options","header","worker","skipEmptyLines","transformHeader","camelCase","comments","transform","trim","dynamicTyping","csv","file","Promise","complete","error","Papa","parse","schema","properties","fullName","type","minLength","email","required","csvRequiredFieldValidator","data","resolve","reject","validate","Ajv","compile","every","obj","addId","idx","id","addDuplicationField","arr","targetIdx","findIndex","item","duplicateWith","UploadFile","dispatch","useDispatch","Container","fluid","className","fileTypes","multiplyFiles","handleFiles","files","valid","pop","Blob","then","requiredFieldValidator","payload","catch","err","console","parseFile","Button","variant","size","columns","Header","accessor","validator","row","isPhoneValid","emailValidator","isEmailValid","age","isInteger","isAgeValid","checkExperience","currentAge","experienceNumber","ageNumber","isExperienceValid","income","yearlyIncomeNumber","isYearlyIncomeValid","moment","isValid","diff","isExpirationDateValid","isHasChildrenValid","isLicenseNumberValid","isLicenseStateValid","Table","useSelector","useTable","getTableProps","headerGroups","rows","prepareRow","striped","bordered","hover","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","i","getRowProps","cells","cell","original","cellProps","getCellProps","hasOwnProperty","Warning","Alert","Heading","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","dataReducer","action","validationReducer","rootReducer","combineReducers","middleware","thunk","store","createStore","applyMiddleware","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63d87dd9.chunk.js","sourcesContent":["export const PARSE_FILE = 'PARSE_FILE';\r\nexport const VALID_STRUCTURE = 'VALID_STRUCTURE';\r\nexport const ADD_FILE_NAME = 'ADD_FILE_NAME';\r\nexport const DELETE_DATA = 'DELETE_DATA';\r\n","export const MIN_AGE = 21;\r\nexport const MAX_AGE = 150;\r\nexport const MIN_YEARLY_INCOME = 0;\r\nexport const MAX_YEARLY_INCOME = 1000000;\r\nexport const DATE_FORMATS = ['YYYY-MM-DD', 'MM/DD/YYYY'];\r\nexport const PHONE_FORMATS = [/^\\+1\\d{10}$/, /^1\\d{10}$/, /^\\d{10}$/];\r\nexport const LICENSE_NUMBER_FORMATS = [/^[a-zA-Z0-9]{6}$/];\r\nexport const WARNING_MESSAGE = 'File format is not correct';\r\nexport const WARNING_ALERT_VARIANT = 'danger';\r\nexport const INVALID_CELL = 'table-danger';\r\nexport const IMPORT_BUTTON_VARIANT = 'success';\r\n","export const ID = 'id';\r\nexport const FULL_NAME = 'fullName';\r\nexport const PHONE = 'phone';\r\nexport const EMAIL = 'email';\r\nexport const AGE = 'age';\r\nexport const EXPERIENCE = 'experience';\r\nexport const YEARLY_INCOME = 'yearlyIncome';\r\nexport const HAS_CHILDREN = 'hasChildren';\r\nexport const LICENSE_STATES = 'licenseStates';\r\nexport const EXPIRATION_DATE = 'expirationDate';\r\nexport const LICENSE_NUMBER = 'licenseNumber';\r\nexport const DUPLICATE_WITH = 'duplicateWith';\r\n","import phone from 'phone';\r\nimport { PHONE_FORMATS } from '../configs/constants';\r\n\r\n// TODO: ask client about conditions\r\nconst phoneFormatter = (phoneNumber) => {\r\n  const isValid = PHONE_FORMATS.some((reg) => reg.test(phoneNumber));\r\n  if (isValid) {\r\n    return phone(phoneNumber)[0];\r\n  }\r\n  return phoneNumber;\r\n};\r\n\r\nexport default phoneFormatter;\r\n","import _ from 'lodash';\r\n\r\nconst emailFormatter = (str) => _.toLower(str);\r\n\r\nexport default emailFormatter;\r\n","const hasChildFormatter = (value) => {\r\n  if (value.length === 0) {\r\n    return 'false';\r\n  }\r\n  return value;\r\n};\r\n\r\nexport default hasChildFormatter;\r\n","const yearlyIncomeFormatter = (value) => {\r\n  const number = Number(value);\r\n  if (Number.isNaN(number)) {\r\n    return value;\r\n  }\r\n  return String(Number.parseFloat(number).toFixed(2));\r\n\r\n  // return data.map((obj) => {\r\n  //   const value = obj[YEARLY_INCOME];\r\n  //   if (typeof value === 'number' && !Number.isNaN(value)) {\r\n  //     return {\r\n  //       ...obj,\r\n  //       [YEARLY_INCOME]: Number.parseFloat(value).toFixed(2),\r\n  //     };\r\n  //   }\r\n  //   return obj;\r\n  // });\r\n};\r\n\r\nexport default yearlyIncomeFormatter;\r\n","import statesJSON from '../configs/states_titlecase.json';\r\n\r\nconst licenseStatesFormatter = (value) => {\r\n  const statesArr = value.split(/\\s*\\|\\s*/);\r\n  const statesAbbreviationArr = statesArr.map((str) => {\r\n    const state = statesJSON.find(({ name, abbreviation }) => {\r\n      return (\r\n        name.toLowerCase() === str.toLowerCase() ||\r\n        abbreviation.toLowerCase() === str.toLowerCase()\r\n      );\r\n    });\r\n    if (state !== undefined) {\r\n      return state.abbreviation;\r\n    }\r\n    return str; // If there is no such state in list return original value\r\n  });\r\n  return statesAbbreviationArr.join(' | ');\r\n};\r\n\r\nexport default licenseStatesFormatter;\r\n","import _ from 'lodash';\r\nimport {\r\n  PHONE,\r\n  EMAIL,\r\n  HAS_CHILDREN,\r\n  YEARLY_INCOME,\r\n  LICENSE_STATES,\r\n} from './header-accessors';\r\nimport phoneFormatter from '../utils/phone-formatter';\r\nimport emailFormatter from '../utils/email-formatter';\r\nimport hasChildFormatter from '../utils/has-children-formatter';\r\nimport yearlyIncomeFormatter from '../utils/yearly-income-formatter';\r\nimport licenseStatesFormatter from '../utils/license-states-formatter';\r\n\r\n// TODO: Check prevalidation in tables\r\n// https://stackoverflow.com/questions/56219293/display-boolean-and-timestamp-values-inside-react-table-react-table-reacttyp#answer-58363447\r\nconst dataNormalize = (value, header) => {\r\n  let str = _.trim(value, `'\" `);\r\n\r\n  switch (header) {\r\n    case PHONE:\r\n      return phoneFormatter(str);\r\n    case EMAIL:\r\n      return emailFormatter(str);\r\n    case HAS_CHILDREN:\r\n      return hasChildFormatter(str);\r\n    case YEARLY_INCOME:\r\n      return yearlyIncomeFormatter(str);\r\n    case LICENSE_STATES:\r\n      return licenseStatesFormatter(str);\r\n    default:\r\n      return str;\r\n  }\r\n};\r\n\r\nconst headerNormalize = (value) => _.camelCase(value.toLowerCase());\r\n\r\nconst options = {\r\n  header: true,\r\n  worker: false, // when true there is a problem with next parsing\r\n  skipEmptyLines: true,\r\n  transformHeader: headerNormalize,\r\n  comments: true,\r\n  transform: dataNormalize,\r\n  dynamicTyping: false, // can be a problem with display data\r\n};\r\n\r\nexport default options;\r\n","import Papa from 'papaparse';\r\nimport options from '../configs/papaparse.config';\r\n\r\nconst csv = (file) => {\r\n  return new Promise((complete, error) => {\r\n    Papa.parse(file, { ...options, complete, error });\r\n  });\r\n};\r\n\r\nexport default csv;\r\n","import Ajv from 'ajv';\r\nimport { FULL_NAME, PHONE, EMAIL } from '../configs/header-accessors';\r\nimport { WARNING_MESSAGE } from '../configs/constants';\r\n\r\nconst schema = {\r\n  properties: {\r\n    fullName: { type: 'string', minLength: 1 },\r\n    phone: { type: 'string', minLength: 1 },\r\n    email: { type: 'string', minLength: 1 },\r\n  },\r\n  required: [FULL_NAME, PHONE, EMAIL],\r\n};\r\n\r\nconst csvRequiredFieldValidator = (data) => {\r\n  return new Promise((resolve, reject) => {\r\n    const ajv = new Ajv();\r\n    const validate = ajv.compile(schema);\r\n    const valid = data.every((obj) => validate(obj));\r\n    if (valid) {\r\n      resolve(data);\r\n    }\r\n    reject(WARNING_MESSAGE);\r\n  });\r\n};\r\n\r\nexport default csvRequiredFieldValidator;\r\n","const addId = (data) => {\r\n  return data.map((obj, idx) => ({ id: idx + 1, ...obj }));\r\n};\r\n\r\nexport default addId;\r\n","const addDuplicationField = (arr) => {\r\n  return arr.map((obj) => {\r\n    const { id, phone, email } = obj;\r\n    let targetIdx = arr.findIndex((item) => {\r\n      return (item.phone === phone || item.email === email) && item.id !== id;\r\n    });\r\n    const duplicateWith = targetIdx === -1 ? '' : arr[targetIdx].id;\r\n    return { ...obj, duplicateWith };\r\n  });\r\n};\r\n\r\nexport default addDuplicationField;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport ReactFileReader from 'react-file-reader';\r\nimport { parseFile, deleteData } from '../../actions/dataActions';\r\nimport { changeValidity } from '../../actions/validationActions';\r\nimport { Button } from 'react-bootstrap';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { IMPORT_BUTTON_VARIANT } from '../../configs/constants';\r\n\r\nfunction UploadFile() {\r\n  const dispatch = useDispatch();\r\n\r\n  const handleFiles = (files) => {\r\n    const [file] = files;\r\n    const { name } = file;\r\n    if (name.split('.').pop() === 'csv') {\r\n      dispatch(parseFile(file));\r\n    } else {\r\n      dispatch(changeValidity(false));\r\n      dispatch(deleteData());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container fluid=\"md\" className=\"d-flex flex-row-reverse mt-4 mb-4\">\r\n      <ReactFileReader\r\n        fileTypes={['.csv']}\r\n        multiplyFiles={false}\r\n        handleFiles={handleFiles}\r\n      >\r\n        <Button variant={IMPORT_BUTTON_VARIANT} size=\"lg\">\r\n          Import users\r\n        </Button>\r\n      </ReactFileReader>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default UploadFile;\r\n","import UploadFile from './UploadFile';\r\nexport default UploadFile;\r\n","import { VALID_STRUCTURE } from './types';\n\nexport const changeValidity = (valid) => (dispatch) => {\n  dispatch({\n    type: VALID_STRUCTURE,\n    valid,\n  });\n};\n","import { PARSE_FILE, VALID_STRUCTURE, DELETE_DATA } from './types';\r\nimport { WARNING_MESSAGE } from '../configs/constants';\r\nimport csv from '../parser/csv';\r\nimport requiredFieldValidator from '../utils/csv-required-fields-validator';\r\nimport addId from '../utils/add-id';\r\nimport addDuplicationField from '../utils/add-duplication-field';\r\n\r\n// TODO: convert all boolean to string\r\n// TODO: ask the client about a range of input formats\r\nexport const parseFile = (file) => (dispatch) => {\r\n  if (file instanceof Blob) {\r\n    csv(file)\r\n      .then(({ data }) => requiredFieldValidator(data)) // Validation of required fields - fullName, phone, email\r\n      .then((data) => {\r\n        // if everything ok then data structure is valid\r\n        dispatch({\r\n          type: VALID_STRUCTURE,\r\n          valid: true,\r\n        });\r\n        return data;\r\n      })\r\n      .then(addId) // Add id\r\n      .then(addDuplicationField) // Add duplicate with first found ID\r\n      .then((data) => {\r\n        dispatch({\r\n          type: PARSE_FILE,\r\n          payload: data,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n        if (err === WARNING_MESSAGE) {\r\n          dispatch({\r\n            type: VALID_STRUCTURE,\r\n            valid: false,\r\n          });\r\n        }\r\n      });\r\n  }\r\n};\r\n\r\nexport const deleteData = () => (dispatch) => {\r\n  dispatch({\r\n    type: DELETE_DATA,\r\n  });\r\n};\r\n","const columns = [\r\n  {\r\n    Header: 'ID',\r\n    accessor: 'id',\r\n  },\r\n  {\r\n    Header: 'Full Name',\r\n    accessor: 'fullName',\r\n  },\r\n  {\r\n    Header: 'Phone',\r\n    accessor: 'phone',\r\n  },\r\n  {\r\n    Header: 'Email',\r\n    accessor: 'email',\r\n  },\r\n  {\r\n    Header: 'Age',\r\n    accessor: 'age',\r\n  },\r\n  {\r\n    Header: 'Experience',\r\n    accessor: 'experience',\r\n  },\r\n  {\r\n    Header: 'Yearly Income',\r\n    accessor: 'yearlyIncome',\r\n  },\r\n  {\r\n    Header: 'Has children',\r\n    accessor: 'hasChildren',\r\n  },\r\n  {\r\n    Header: 'License states',\r\n    accessor: 'licenseStates',\r\n  },\r\n  {\r\n    Header: 'Expiration date',\r\n    accessor: 'expirationDate',\r\n  },\r\n  {\r\n    Header: 'License number',\r\n    accessor: 'licenseNumber',\r\n  },\r\n  {\r\n    Header: 'Duplicate with',\r\n    accessor: 'duplicateWith',\r\n  },\r\n];\r\n\r\nexport default columns;\r\n","import {\r\n  AGE,\r\n  EMAIL,\r\n  EXPERIENCE,\r\n  EXPIRATION_DATE,\r\n  HAS_CHILDREN,\r\n  LICENSE_NUMBER,\r\n  LICENSE_STATES,\r\n  PHONE,\r\n  YEARLY_INCOME,\r\n} from '../configs/header-accessors';\r\nimport { validate as emailValidator } from 'email-validator';\r\nimport {\r\n  DATE_FORMATS,\r\n  MAX_AGE,\r\n  MIN_YEARLY_INCOME,\r\n  MAX_YEARLY_INCOME,\r\n  MIN_AGE,\r\n  PHONE_FORMATS,\r\n  LICENSE_NUMBER_FORMATS,\r\n} from '../configs/constants';\r\nimport moment from 'moment';\r\nimport statesJSON from '../configs/states_titlecase.json';\r\n\r\nexport const isFullNameValid = (value) => {\r\n  if (typeof value !== 'string' || value.length === 0) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const isPhoneValid = (value) => {\r\n  if (typeof value !== 'string' || value.length === 0) {\r\n    return false;\r\n  }\r\n  return PHONE_FORMATS.some((reg) => reg.test(value));\r\n};\r\n\r\nexport const isEmailValid = (value) => {\r\n  if (typeof value !== 'string' || value.length === 0) {\r\n    return false;\r\n  }\r\n  return emailValidator(value);\r\n};\r\n\r\n// TODO: Ask the client about max age limit\r\nexport const isAgeValid = (value) => {\r\n  const checkAge = (age) => {\r\n    return (\r\n      Number.isNaN(age) !== true &&\r\n      Number.isInteger(age) &&\r\n      age >= MIN_AGE &&\r\n      age <= MAX_AGE\r\n    );\r\n  };\r\n  const age = Number(value);\r\n  return checkAge(age);\r\n};\r\n\r\n// TODO: Ask a client about type of number (int or float)\r\nexport const isExperienceValid = (value, age) => {\r\n  const checkExperience = (number, currentAge) => {\r\n    return number >= 0 && number <= currentAge - MIN_AGE;\r\n  };\r\n  const experienceNumber = Number(value);\r\n  const ageNumber = Number(age);\r\n  if (Number.isNaN(experienceNumber)) {\r\n    return false;\r\n  }\r\n  if (Number.isNaN(ageNumber) || !Number.isInteger(ageNumber)) {\r\n    return checkExperience(experienceNumber, MIN_AGE);\r\n  }\r\n  return checkExperience(experienceNumber, ageNumber);\r\n};\r\n\r\nexport const isYearlyIncomeValid = (value) => {\r\n  const checkYearlyIncome = (income) => {\r\n    return income >= MIN_YEARLY_INCOME && income <= MAX_YEARLY_INCOME;\r\n  };\r\n  const yearlyIncomeNumber = Number(value);\r\n  if (Number.isNaN(yearlyIncomeNumber)) {\r\n    return false;\r\n  }\r\n  return checkYearlyIncome(yearlyIncomeNumber);\r\n};\r\n\r\nexport const isExpirationDateValid = (value) => {\r\n  const isValidFormat = moment(value, DATE_FORMATS, true).isValid();\r\n  if (isValidFormat) {\r\n    return moment().diff(value) <= 0;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const isHasChildrenValid = (value) => {\r\n  return value === 'true' || value === 'false' || value.length === 0;\r\n};\r\n\r\nexport const isLicenseNumberValid = (value) => {\r\n  return LICENSE_NUMBER_FORMATS.some((reg) => reg.test(value));\r\n};\r\n\r\nexport const isLicenseStateValid = (value) => {\r\n  if (value.length !== 6) {\r\n    return false;\r\n  }\r\n  const currentStates = value.split(/\\s*\\|\\s*/);\r\n  return currentStates.every((str) => {\r\n    return statesJSON.some(({ name, abbreviation }) => {\r\n      return (\r\n        name.toLowerCase() === str.toLowerCase() ||\r\n        abbreviation.toLowerCase() === str.toLowerCase()\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\n// TODO: Add exception for not important columns\r\nconst validator = (value, header, row) => {\r\n  switch (header) {\r\n    case PHONE:\r\n      return isPhoneValid(value);\r\n    case EMAIL:\r\n      return isEmailValid(value);\r\n    case AGE:\r\n      return isAgeValid(value);\r\n    case EXPERIENCE:\r\n      return isExperienceValid(value, row.age);\r\n    case YEARLY_INCOME:\r\n      return isYearlyIncomeValid(value);\r\n    case EXPIRATION_DATE:\r\n      return isExpirationDateValid(value);\r\n    case HAS_CHILDREN:\r\n      return isHasChildrenValid(value);\r\n    case LICENSE_NUMBER:\r\n      return isLicenseNumberValid(value);\r\n    case LICENSE_STATES:\r\n      return isLicenseStateValid(value);\r\n    default:\r\n      return true;\r\n  }\r\n};\r\n\r\nexport default validator;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useTable } from 'react-table';\r\nimport { INVALID_CELL } from '../../configs/constants';\r\nimport columns from '../../configs/columns';\r\nimport validator from '../../utils/validator';\r\nimport BTable from 'react-bootstrap/Table';\r\n\r\nfunction Table() {\r\n  // TODO: useMemo to not recalculate on every single render\r\n\r\n  const data = useSelector((state) => state.data);\r\n\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const { getTableProps, headerGroups, rows, prepareRow } = useTable({\r\n    columns,\r\n    data,\r\n  });\r\n\r\n  return (\r\n    <BTable striped bordered hover {...getTableProps()}>\r\n      <thead>\r\n        {headerGroups.map((headerGroup) => (\r\n          <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map((column) => (\r\n              <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody>\r\n        {rows.map((row, i) => {\r\n          prepareRow(row);\r\n          return (\r\n            <tr {...row.getRowProps()}>\r\n              {row.cells.map((cell) => {\r\n                const { id: header } = cell.column;\r\n                const { value } = cell;\r\n                let isValid = validator(value, header, cell.row.original);\r\n\r\n                // TODO: find more safer way to add class\r\n                // Add class if data is invalid\r\n                const cellProps = { ...cell.getCellProps() };\r\n                if (!isValid) {\r\n                  if (cellProps.hasOwnProperty('className')) {\r\n                    cellProps.className = `${cellProps.className} ${INVALID_CELL}`;\r\n                  } else {\r\n                    cellProps.className = INVALID_CELL;\r\n                  }\r\n                }\r\n                return <td {...cellProps}>{cell.render('Cell')}</td>;\r\n              })}\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </BTable>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import Table from './Table';\r\nexport default Table;\r\n","import React from 'react';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport {\r\n  WARNING_MESSAGE,\r\n  WARNING_ALERT_VARIANT,\r\n} from '../../configs/constants';\r\n\r\nfunction Warning() {\r\n  return (\r\n    <Container fluid=\"md\">\r\n      <Alert variant={WARNING_ALERT_VARIANT} className=\"mt-4 mb-4\">\r\n        <Alert.Heading className=\"text-center mt-4 mb-4\">\r\n          {WARNING_MESSAGE || 'Oops, something went wrong'}\r\n        </Alert.Heading>\r\n      </Alert>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Warning;\r\n","import Warning from './Warning';\r\nexport default Warning;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport UploadFile from '../UploadFile';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Table from '../Table';\r\nimport Warning from '../Warning';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nfunction App() {\r\n  const valid = useSelector((state) => state.valid);\r\n  return (\r\n    <Container fluid>\r\n      <UploadFile />\r\n      {valid ? <Table /> : <Warning />}\r\n      {valid && <UploadFile />}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import App from './App';\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { PARSE_FILE, DELETE_DATA } from '../actions/types';\r\n\r\nconst initialState = [];\r\n\r\nconst dataReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case PARSE_FILE:\r\n      return [...action.payload];\r\n    case DELETE_DATA:\r\n      return [];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default dataReducer;\r\n","import { VALID_STRUCTURE } from '../actions/types';\r\n\r\nconst initialState = false;\r\n\r\nconst validationReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case VALID_STRUCTURE:\r\n      return action.valid;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default validationReducer;\r\n","import { combineReducers } from 'redux';\r\nimport dataReducer from './dataReducer';\r\nimport validationReducer from './validationReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  data: dataReducer,\r\n  valid: validationReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  applyMiddleware(...middleware)\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}